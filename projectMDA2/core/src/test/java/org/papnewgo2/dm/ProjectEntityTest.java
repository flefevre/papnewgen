// license-header java merge-point
//
/**
 * Generated by test/EntityTest.java.vsl in andromda-ejb3-cartridge on 06/29/2017 15:09:15.
 * This file can be safely modified. If deleted it will be regenerated.
 */
package org.papnewgo2.dm;
/**
 * TestNG Unit Test to Create and Validate and Update and Delete the Project Entity
 */

import java.util.List;
import javax.persistence.TypedQuery;
import org.andromda.dbtest.JPAJUnitAncestor;
import org.andromda.dbtest.Priority;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

/**
 * Create PROJECT row from Project Entity
 */
public class ProjectEntityTest extends JPAJUnitAncestor
{
    private static Logger LOGGER = LogManager.getLogger(ProjectEntityTest.class);
    /** Persisted Entity to retrieve and update and delete from */
    protected static Project entity = null;

    /**
     * Creates PROJECT record. TestNG creates test group is run before retrieves and deletes.
     */
    @Test(groups = { "creates" })
    @Priority(2000+0)
    public void testCreateProject()
    {
        LOGGER.info("TEST CREATE Project");
        // Delete all rows from table  - avoid duplicate PK error or created record not found
        this.deleteAll();
        Project project = ProjectCreate.createEntity(this.getEm());
        LOGGER.debug("persisting " + project);
        this.getEm().persist(project);
        int results = this.logEntities();
        // Will also fail if all rows are not deleted during setUp
        Assert.assertTrue(results > 0, "Project inserted but record not found");
        // Save PK for later retrieve/delete
        ProjectEntityTest.entity = project;
        LOGGER.info("SUCCESS: CREATED Project " + project);
    }

    /**
     * Retrieving PROJECT record. Run after TestNG creates test group and before deletes group.
     */
    @Test(groups = { "retrieves" }, ignoreMissingDependencies=true)
    @Priority(3000+0)
    public void testRetrieveProject()
    {
        LOGGER.info("TEST RETRIEVE Project");
        Long pk = Long.valueOf(1);
        Project project = this.getEm().find(Project.class, pk);
        if (project==null)
        {
            LOGGER.info("Project not found for Primary Key value: " + pk + ", findingFirst Entity");
            project = ProjectCreate.findFirst(this.getEm());
        }
        else
        {
            LOGGER.info("SUCCESS: RETRIEVED Project: " + project);
        }
    }

    /**
     * Deleting PROJECT record. Run after TestNG creates and retrieves test group.
     */
    @Test(groups = { "deletes" }, ignoreMissingDependencies=true)
    @Priority(5000+0)
    public void testDeleteProject()
    {
        LOGGER.info("TEST DELETE Project");
        Project project = ProjectCreate.findFirst(this.getEm());
        if (!this.getEm().contains(project))
        {
            LOGGER.info("merging Project: " + project);
            project = this.getEm().merge(project);
        }
        LOGGER.info("deleting Project: " + project);
        this.getEm().remove(project);
        LOGGER.info("SUCCESS: DELETED Project");
    }

    /**
     * Find All Entities Project - run only against test DB
     * @return Project
     */
    public List<Project> findAll()
    {
        TypedQuery<Project> query = this.getEm().createNamedQuery("Project.findAll", Project.class);
        List<Project> results = query.getResultList();
        return results;
    }

    /*
     * Return a persisted Entity Project with all attributes and associations set
     * Used to set persistent association relationships in related entities.
     * Called by test delete method - this method should not be a test method
     * @return Project
    public Project findFirst()
    {
        Project project = null;
        List<Project> results = findAll();
        if (results.size() > 0)
        {
            project = results.get(0);
        }
        else
        {
            project = ProjectCreate.createEntity(this.getEm());
            this.getEm().persist(project);
        }
        return project;
    }
     */

    /**
     * Add any custom code to be executed once before any tests are executed
     */
    @Override
    @BeforeClass(alwaysRun=true)
    public void setUpBeforeClass()
    {
        super.setUpBeforeClass();
        // Insert code here to be executed before any tests are run
    }

    /**
     * Add any custom code to be executed once after all tests are executed
     */
    @Override
    @AfterClass(alwaysRun=true)
    public void tearDownAfterClass()
    {
        super.tearDownAfterClass();
        // Insert code here to be executed after tests are complete
        super.closeAll();
    }

    /**
     * Add any custom code to be executed before each tests are executed
     */
    @Override
    @BeforeMethod(alwaysRun=true)
    public void setUp()
    {
        super.setUp();
    }

    /**
     * Add any custom code to be executed after each tests are executed
     */
    @Override
    @AfterMethod(alwaysRun=true)
    public void tearDown()
    {
        super.tearDown();
    }

    /**
     * Unit test Constructor with no arguments
     */
    public ProjectEntityTest()
    {
        super();
        // Public no arg constructor
        this.entityName = "Project";
        this.table = "PROJECT";
    }

    /**
     * Unit test Constructor with test case name
     * @param name test case name
     */
    public ProjectEntityTest(final String name)
    {
        super(name);
        this.entityName = "Project";
        this.table = "PROJECT";
    }
}